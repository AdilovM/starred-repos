Thanks again for your detailed and very helpful comments!

First off, on your general suggestion that Git and Deployment are 'orthogonal' to TDD -- I tend to agree, especially on the former.

I guess it's about the picture I have in my head of my target audience -- people who are relatively new to programming, who've maybe hacked together a few programs, or maybe just finished a degree.  Basically, it's me 4 years ago.  If I look back on what I've learned over the past few years, things I think are absolutely indispensable skills, TDD is one, but how Git fits into my development process is also a huge part of it.  Experienced developers will probably already know git, so they can just skip over my explanations (which are pretty much confined to chapter 1), but my hope is that beginners will get a lot out of it.  It's all part of the flow of a more mature development process -- test, edit, commit, as someone put it in another thread.

Same thing with deployment -- although I think I've made a case for how testing *does* interact with deployment and staging sites, much more so than it does with VCS.  But the point is that you're not a web developer until you've deployed your app, so, again, my hope is that beginners will be getting something out of that chapter.

Re showing non-best-practice first, my aim is to start with the simplest possible thing as a way of introducing the core concept. Then I can bring in the best practice once I feel the reader is ready for them.  I mean, I can't throw in git, virtualenvs, south, postgres, gunicorn, CDNs, selenium, unittest, django, memcached and all the rest into the very first chapter!  Perhaps I do sometimes take it a little too far though...  I'll have another read-through.

Thanks for the suggestion re the FT comments spec too.  I guess some of that is a matter of style, or what you're used to... The comments are consciously quite vague, whilst the selenium assertions are specific, precisely because the former represent human-language requirements and the latter start to be implementation-dependent. You could imagine changing the implementation without changing the implementation. I'm thinking of including a chapter or appendix on BDD though, so I may be able to introduce a different style there.  I really don't know enough about it yet, so if you 're interested in a collaboration, do get in touch.

Re chapter 7, I know I'm in a danger area there.  I certainly don't think you should test cosmetics, and as you diagnosed, the main point of the test is as a smoke test that the CSS has loaded correctly.  So, would some kind of non-functional integration test be better?  Maybe... The FT I guess adds the check that not only is the CSS available, but also that it was loaded correctly by the page... I guess I should just make it clearer about what the objective of that test is, and be more explicit about saying "don't test cosmetics".  With that said, there's definitely a place for testing layout using functional tests... JavaScript-driven resize behaviour an example that springs to mind from PythonAnywhere

Thanks for the validation re my belt + braces, FT + unit approach.

Finally, onto the random notes!

I've never used RequestFactory.  What does it give you that instantiating a regular HttpRequest() doesn't?

And, wow, thanks for telling me about addCleanup() -- I can't believe I'd never come across that (maybe it's because we used to write within the constraints of Python 2.6 unittest).  Love it, will definitely be using it.

Re starting + stopping firefox for each test, I just defaulted to that because it's what we do at PA. I think our intention there was about isolating FTs completely, making sure that cookies  + sessions are clean each time, etc. That may not always be necessary, but at least once I do it very deliberately...  I'll make a mention of it as a possible optimisation.

Finally, on the overall dev process, I'm just alt-tabbing between a console and editor, and that's pretty much what I'm telling people to do.  Automated file watchers are cool -- I think my ex-colleague JB wrote one called rerun -- but I think I'll leave them for people to discover on their own. CI I hope to cover in a later chapter,  cf the outline...

Once again, thanks again for your detailed comments.   It's nice to have some validation, to learn a couple of things, and also to have a couple of decisions challenged.  I'll go away and think about it all.  And do get in touch if you want to work together on a BDD chapter -- if nothing else, I'd love to know what you use, and what your experience is with your tools, what you've ruled out, what you've preferred and why, possible pitfalls...


