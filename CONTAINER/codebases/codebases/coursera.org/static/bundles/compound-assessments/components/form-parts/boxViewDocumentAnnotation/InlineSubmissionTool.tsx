import React from 'react';
import { compose } from 'recompose';
import Q from 'q';
import API from 'js/lib/api';
import Uri from 'jsuri';
import gql from 'graphql-tag';

import initBem from 'js/lib/bem';
// @ts-ignore ts-migrate(7016) FIXME: Could not find a declaration file for module 'js/l... Remove this comment to see the full error message
import getPropsFromPromise from 'js/lib/getPropsFromPromise';
import waitFor from 'js/lib/waitFor';
import user from 'js/lib/user';

import WidgetFrame from 'bundles/widget/components/WidgetFrame';

import CenteredLoadingSpinner from 'bundles/assess-common/components/CenteredLoadingSpinner';
import { Query } from 'react-apollo';

import type {
  FindBoxViewAnnotatorProfileByUserIdRequest,
  FindBoxViewAnnotatorProfileByUserIdResponse,
  CreateBoxViewAnnotatorProfileRequest,
  CreateBoxViewAnnotatorProfileResponse,
} from '@coursera/grpc-types-boxintegration/coursera/proto/boxintegration/boxviewannotatorprofiles/v1beta1/box_view_annotator_profiles_api';

import type {
  OnDemandBoxViewAnnotationSessionsV1,
  OnDemandBoxViewAnnotationSessionsV1CreateForGradingMutationVariables,
} from 'bundles/naptimejs/resources/__generated__/OnDemandBoxViewAnnotationSessionsV1';

const bem = initBem('InlineSubmissionTool');

/* eslint-disable graphql/template-strings */
export const onDemandBoxViewAnnotationSessionsQuery = gql`
  query onDemandBoxViewAnnotationSessionsQuery(
    $body: String!
    $itemId: String!
    $reviewResponseId: String!
    $courseId: String!
    $userId: Number!
    $action: String!
    $annotatorProfileId: String!
  ) {
    onDemandBoxViewAnnotationSessions(
      body: $body
      itemId: $itemId
      reviewResponseId: $reviewResponseId
      courseId: $courseId
      userId: $userId
      action: $action
      annotatorProfileId: $annotatorProfileId
    )
      @rest(
        type: "RestOnDemandBoxViewAnnotationSessionsV1"
        path: "onDemandBoxViewAnnotationSessions.v1?action={args.action}&userId={args.userId}&courseId={args.courseId}&reviewResponseId={args.reviewResponseId}&itemId={args.itemId}{args.annotatorProfileId}"
        method: "POST"
        bodyKey: "body"
      ) {
      session @type(name: "RestOnDemandBoxViewAnnotationSessionsSession")
      sessionId
    }
  }
`;

type PropsFromParent = {
  itemId: string;
  courseId: string;
  userId: number;
  reviewResponseId: string;
  annotationsDisabled: boolean;
};

type PropsWithAnnotatorProfileId = {
  annotatorProfileId?: string;
};

type Props = PropsFromParent & PropsWithAnnotatorProfileId;

type OnDemandBoxViewAnnotationSessionsV1QueryResult = {
  onDemandBoxViewAnnotationSessions: OnDemandBoxViewAnnotationSessionsV1;
};

type OnDemandBoxViewAnnotationSessionsV1QueryVariables = OnDemandBoxViewAnnotationSessionsV1CreateForGradingMutationVariables & {
  action: string;
  body: {};
};

export const InlineSubmissionTool: React.FC<Props> = ({
  itemId,
  courseId,
  reviewResponseId,
  userId,
  annotationsDisabled,
  annotatorProfileId,
}) => (
  <div className={bem()}>
    <Query<OnDemandBoxViewAnnotationSessionsV1QueryResult, OnDemandBoxViewAnnotationSessionsV1QueryVariables>
      query={onDemandBoxViewAnnotationSessionsQuery}
      variables={{
        body: {},
        itemId,
        courseId,
        reviewResponseId,
        userId: userId.toString(),
        // we are using annotationsDisabled because grader will no longer have a view only state in the future
        action: annotationsDisabled ? 'createForViewing' : 'createForGrading',
        annotatorProfileId: annotatorProfileId ? `&annotatorProfileId=${annotatorProfileId}` : '',
      }}
    >
      {({ loading, data }) => {
        if (loading || !data) {
          return <CenteredLoadingSpinner />;
        }
        const { session, sessionId } = data.onDemandBoxViewAnnotationSessions;
        return (
          <WidgetFrame
            // @ts-ignore FIXME autogenerated session types are not compatible with manually defined
            session={session}
            sessionId={sessionId}
            widgetId="box-inline-feedback"
            fallbackDefaultHeight="100%"
            showPopupButton={true}
          />
        );
      }}
    </Query>
  </div>
);

export default compose<Props, PropsFromParent>(
  getPropsFromPromise(
    ({ annotationsDisabled }: PropsFromParent): Q.Promise<PropsWithAnnotatorProfileId> => {
      if (annotationsDisabled) {
        return Q({});
      }

      // Attempt to get annotator profile for current user. Create one if it doesn't exist.
      const api = API('/api/grpc/boxintegration/boxviewannotatorprofiles/v1beta1/BoxViewAnnotatorProfilesAPI', {
        type: 'rest',
      });

      const fetchProfilesUri = new Uri('FindBoxViewAnnotatorProfileByUserId');
      const fetchData: FindBoxViewAnnotatorProfileByUserIdRequest = { userId: user.get().id };

      return Q(api.post(fetchProfilesUri.toString(), { data: fetchData })).then(
        (response: FindBoxViewAnnotatorProfileByUserIdResponse) => {
          if (response.boxViewAnnotatorProfile.length > 0) {
            return {
              annotatorProfileId: response.boxViewAnnotatorProfile[0].boxViewProfileAnnotatorId,
            };
          } else {
            const createProfileUri = new Uri('CreateBoxViewAnnotatorProfile');
            const createData: CreateBoxViewAnnotatorProfileRequest = {
              userId: user.get().id,
              displayName: user.get().display_name,
            };
            return Q(api.post(createProfileUri.toString(), { data: createData })).then(
              (createResponse: CreateBoxViewAnnotatorProfileResponse) => {
                return {
                  annotatorProfileId: createResponse.boxViewAnnotatorProfile?.boxViewProfileAnnotatorId,
                };
              }
            );
          }
        }
      );
    }
  ),
  waitFor((props) => props.annotationsDisabled || !!props.annotatorProfileId)
)(InlineSubmissionTool);
