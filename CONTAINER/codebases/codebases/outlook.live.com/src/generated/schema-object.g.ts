// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by the @augloop/code-gen tool.
// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Fschema-object.ts
// Changes to this file may cause incorrect behavior and will be lost upon regeneration.
// </auto-generated>
// ------------------------------------------------------------------------------

import { ISchemaObject, SchemaObjectHeader } from '../schema-object';

export class SchemaObject implements ISchemaObject {
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: ISchemaObject) {
        SchemaObject.assign(SchemaObject, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_SchemaObject';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: SchemaObject.getTypeName(), B_: SchemaObject.getBaseTypes() };

    // Get type name for the given ISchemaObject instance.
    // Example:
    //   SchemaObject.getTypeNameFor(new Foo()) === 'Foo'
    public static getTypeNameFor(obj: ISchemaObject): string {
        return (obj && obj.H_) ? obj.H_.T_ : undefined;
    }

    // Get base types for the given ISchemaObject instance.
    // Example:
    //   SchemaObject.getBaseTypesFor(new Foo()) === ['Bar', 'Baz']
    public static getBaseTypesFor(obj: ISchemaObject): string[] {
        return (obj && obj.H_ && obj.H_.B_) ? obj.H_.B_ : [];
    }

    // Get all types (direct and base) for the given ISchemaObject instance.
    // Example:
    //   SchemaObject.getTypesFor(new Foo()) == ['Foo', 'Bar', 'Baz']
    public static getAllTypesFor(obj: ISchemaObject): string[] {
        const typeName: string = SchemaObject.getTypeNameFor(obj);
        return typeName ? [typeName, ...SchemaObject.getBaseTypesFor(obj)] : [];
    }

    // Returns true if the given object has any of the types in the given array,
    // or if that array is undefined or empty.
    public static matchesTypesFor(obj: ISchemaObject, types: string[]): boolean {
        if (!Array.isArray(types) || types.length === 0) {
            // Nothing passed in means "match everything"
            return true;
        }
        const objType = SchemaObject.getTypeNameFor(obj);
        const baseTypes = (obj && obj.H_ && obj.H_.B_) ? obj.H_.B_ : undefined;
        for (const typeName of types) {
            if (typeName === objType) {
                return true;
            }
            if (baseTypes && baseTypes.indexOf(typeName) >= 0) {
                return true;
            }
        }
        return false;
    }

    public static assign(ctr: any, target: ISchemaObject, source?: ISchemaObject) {
        // Assign source properties to target
        if (source) {
            for (const key of Object.keys(source)) {
                target[key] = source[key];
            }
        }
        // Cast away readonly to set the header
        (target as any).H_ = ctr.H_;
        // Return target instance
        return target;
    }
}

