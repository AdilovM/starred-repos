// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by the @augloop/code-gen tool.
// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Foperations.ts
// Changes to this file may cause incorrect behavior and will be lost upon regeneration.
// </auto-generated>
// ------------------------------------------------------------------------------

import { IAddOperation, IDeleteOperation, IDeltaUpdateOperation, IFocusOperation, IItemDelta, IMicroSyncOperation, IMoveOperation, IOperation, IOperationWithSiblingContext, IPurgeOperation, ISignalOperation, IUpdateAnnotationMetaDataOperation, IUpdateOperation, IVisibilityOperation, Item, ItemPath } from '../operations';
import { SchemaObjectHeader } from '../schema-object';
import { SchemaObject } from './schema-object.g';
import { AnnotationMetaData } from '../annotations';

export class ItemDelta implements IItemDelta {
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IItemDelta) {
        SchemaObject.assign(ItemDelta, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_ItemDelta';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: ItemDelta.getTypeName(), B_: ItemDelta.getBaseTypes() };
}

export class Operation implements IOperation {
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IOperation) {
        SchemaObject.assign(Operation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_Operation';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: Operation.getTypeName(), B_: Operation.getBaseTypes() };
}

export class OperationWithSiblingContext implements IOperationWithSiblingContext {
    public prevId?: string;
    public nextId?: string;
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IOperationWithSiblingContext) {
        SchemaObject.assign(OperationWithSiblingContext, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_OperationWithSiblingContext';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: OperationWithSiblingContext.getTypeName(), B_: OperationWithSiblingContext.getBaseTypes() };
}

export class AddOperation implements IAddOperation {
    public prevId?: string;
    public nextId?: string;
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IAddOperation) {
        SchemaObject.assign(AddOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_AddOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_OperationWithSiblingContext', 'AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: AddOperation.getTypeName(), B_: AddOperation.getBaseTypes() };
}

export class MoveOperation implements IMoveOperation {
    public prevParentPath: ItemPath;
    public prevId?: string;
    public nextId?: string;
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IMoveOperation) {
        SchemaObject.assign(MoveOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_MoveOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_OperationWithSiblingContext', 'AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: MoveOperation.getTypeName(), B_: MoveOperation.getBaseTypes() };
}

export class UpdateAnnotationMetaDataOperation implements IUpdateAnnotationMetaDataOperation {
    public M_: AnnotationMetaData;
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IUpdateAnnotationMetaDataOperation) {
        SchemaObject.assign(UpdateAnnotationMetaDataOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_UpdateAnnotationMetaDataOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: UpdateAnnotationMetaDataOperation.getTypeName(), B_: UpdateAnnotationMetaDataOperation.getBaseTypes() };
}

export class UpdateOperation implements IUpdateOperation {
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IUpdateOperation) {
        SchemaObject.assign(UpdateOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_UpdateOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: UpdateOperation.getTypeName(), B_: UpdateOperation.getBaseTypes() };
}

export class DeleteOperation implements IDeleteOperation {
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IDeleteOperation) {
        SchemaObject.assign(DeleteOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_DeleteOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: DeleteOperation.getTypeName(), B_: DeleteOperation.getBaseTypes() };
}

export class PurgeOperation implements IPurgeOperation {
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IPurgeOperation) {
        SchemaObject.assign(PurgeOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_PurgeOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: PurgeOperation.getTypeName(), B_: PurgeOperation.getBaseTypes() };
}

export class FocusOperation implements IFocusOperation {
    public isFocused: boolean;
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IFocusOperation) {
        SchemaObject.assign(FocusOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_FocusOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: FocusOperation.getTypeName(), B_: FocusOperation.getBaseTypes() };
}

export class VisibilityOperation implements IVisibilityOperation {
    public isVisible: boolean;
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IVisibilityOperation) {
        SchemaObject.assign(VisibilityOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_VisibilityOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: VisibilityOperation.getTypeName(), B_: VisibilityOperation.getBaseTypes() };
}

export class DeltaUpdateOperation implements IDeltaUpdateOperation {
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IDeltaUpdateOperation) {
        SchemaObject.assign(DeltaUpdateOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_DeltaUpdateOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: DeltaUpdateOperation.getTypeName(), B_: DeltaUpdateOperation.getBaseTypes() };
}

export class MicroSyncOperation implements IMicroSyncOperation {
    public readonly seq?: number;
    public readonly opType?: string;
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IMicroSyncOperation) {
        SchemaObject.assign(MicroSyncOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_MicroSyncOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: MicroSyncOperation.getTypeName(), B_: MicroSyncOperation.getBaseTypes() };
}

export class SignalOperation implements ISignalOperation {
    public parentPath: ItemPath;
    public parentRevId?: string;
    public items: Item[];
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: ISignalOperation) {
        SchemaObject.assign(SignalOperation, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Signals_SignalOperation';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_Operation'];
    }
    public static readonly H_ = { T_: SignalOperation.getTypeName(), B_: SignalOperation.getBaseTypes() };
}

