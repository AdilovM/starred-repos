'use es6';

import { jsx as _jsx } from "react/jsx-runtime";
import classNames from 'classnames';
import { List } from 'react-virtualized';
import { DROPDOWN_MENU_HEIGHT } from 'HubStyleTokens/sizes';
var MAX_HEIGHT = parseInt(DROPDOWN_MENU_HEIGHT, 10);
var OPTION_HEIGHT = 40;
var OPTION_GROUP_HEIGHT = 40;
var OPTION_WITH_HELP_HEIGHT = 64;

function isGroup(option) {
  return option && Array.isArray(option.options);
}

function getOptionHeight(option) {
  if (isGroup(option)) {
    return OPTION_GROUP_HEIGHT + option.options.reduce(function (total, child) {
      return total + getOptionHeight(child);
    }, 0);
  }

  if (option.help) {
    return OPTION_WITH_HELP_HEIGHT;
  }

  return OPTION_HEIGHT;
}

function calculateListHeight(options) {
  var height = 0;

  for (var optionIndex = 0; optionIndex < options.length; optionIndex++) {
    var option = options[optionIndex];
    height += getOptionHeight(option);

    if (height > MAX_HEIGHT) {
      return MAX_HEIGHT;
    }
  }

  return height;
}

var menuRendererCache = {};

function virtualizedMenuRenderer(menuWidth) {
  if (!menuRendererCache[menuWidth]) {
    menuRendererCache[menuWidth] = function (_ref) {
      var focusedOption = _ref.focusedOption,
          instancePrefix = _ref.instancePrefix,
          onFocus = _ref.onFocus,
          onOptionRef = _ref.onOptionRef,
          onSelect = _ref.onSelect,
          optionClassName = _ref.optionClassName,
          optionComponent = _ref.optionComponent,
          optionGroupComponent = _ref.optionGroupComponent,
          optionRenderer = _ref.optionRenderer,
          options = _ref.options,
          valueArray = _ref.valueArray,
          valueKey = _ref.valueKey;
      var focusedOptionIndex = options.indexOf(focusedOption);
      var height = calculateListHeight(options);
      var Option = optionComponent;
      var OptionGroup = optionGroupComponent;
      var renderLabel = optionRenderer; // The styles are generated by react-virtualized to control positioning

      function renderOption(option, i, style) {
        if (isGroup(option)) {
          return /*#__PURE__*/_jsx("span", {
            style: style,
            children: /*#__PURE__*/_jsx(OptionGroup, {
              className: "Select-option-group",
              label: renderLabel(option),
              option: option,
              optionIndex: i,
              children: option.options.map(function (opt, idx) {
                return renderOption(opt, idx);
              })
            })
          }, "option-group-" + i);
        }

        var isSelected = valueArray && valueArray.indexOf(option) > -1;
        var isFocused = option === focusedOption;
        var optionClass = classNames("private-typeahead-option--virtualized Select-option", optionClassName, isSelected && 'is-selected', isFocused && 'is-focused', option.disabled && 'is-disabled');
        return /*#__PURE__*/_jsx("span", {
          style: style,
          children: /*#__PURE__*/_jsx(Option, {
            className: optionClass,
            instancePrefix: instancePrefix,
            isDisabled: option.disabled,
            isFocused: isFocused,
            isSelected: isSelected,
            onFocus: onFocus,
            onSelect: onSelect,
            option: option,
            optionIndex: i,
            ref: function ref(_ref2) {
              onOptionRef(_ref2, isFocused);
            },
            children: renderLabel(option, i)
          })
        }, "option-" + i + "-" + option[valueKey]);
      }

      function getRowHeight(_ref3) {
        var index = _ref3.index;
        return getOptionHeight(options[index]);
      }

      function renderRow(_ref4) {
        var index = _ref4.index,
            style = _ref4.style;
        var option = options[index];
        return renderOption(option, index, style);
      }

      return /*#__PURE__*/_jsx(List, {
        height: height,
        rowCount: options.length,
        rowHeight: getRowHeight,
        rowRenderer: renderRow,
        scrollToIndex: focusedOptionIndex,
        width: menuWidth
      });
    };
  }

  return menuRendererCache[menuWidth];
}
/* eslint-enable react/prop-types */


virtualizedMenuRenderer.displayName = 'virtualizedMenuRenderer';
export default virtualizedMenuRenderer;