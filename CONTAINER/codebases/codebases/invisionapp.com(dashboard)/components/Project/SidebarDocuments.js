/**
 * This is a prototype for UI testing.  This should never be seen
 * by customers :)
 */
import React, { memo, useEffect, useState } from 'react'
import qs from 'query-string'

import { FixedSizeList, areEqual } from 'react-window'
import InfiniteLoader from 'react-window-infinite-loader'
import AutoSizer from 'react-virtualized-auto-sizer'

import { DocumentIcon, Dropdown, IconButton, Text, Skeleton } from '@invisionapp/helios'
import { Add } from '@invisionapp/helios/icons'

import { GET_RESOURCES } from '../../constants/ServerURLs'

import request from '../../utils/API'

import styles from '../../css/project-prototype/documents.css'

let hasNextPage = true
let isNextPageLoading = false
let currentQuery = ''
let cursor = ''

export const ProjectDocument = ({ index, style, data: props }) => {
  const doc = props.documents && props.documents[index]
  const isSelected = doc && props.selectedUrl && doc.path === props.selectedUrl

  return (<div style={style}>
    {doc
      ? <div className={`${styles.document} ${isSelected ? styles.selected : ''}`} onClick={() => props.setSelectedUrl(doc.resourceType ? `${doc.path}?mode=embed` : doc.path)}>
        <DocumentIcon size={24} documentType={doc.resourceType} className={styles.icon} />
        <Text order='body' className={styles.title}>{doc.title}</Text>
      </div>
      : <div className={styles.loader}>
        <Skeleton height={13} />
      </div>}
  </div>)
}

const MemoizedDocument = memo(ProjectDocument, areEqual)

const Documents = ({
  isLoading,
  projectId,
  selectedUrl,
  setSelectedUrl
}) => {
  const [documents, setDocuments] = useState([])

  const requestDocuments = async () => {
    if (isNextPageLoading || !projectId) return {}

    isNextPageLoading = true

    const endpoint = GET_RESOURCES
    let newRequest = false
    const params = {
      limit: 50,
      types: ['board', 'freehand', 'harmony', 'presentation', 'prototype', 'rhombus', 'spec', 'figma'],
      projectId,
      sortBy: 'title',
      sortOrder: 'asc'
    }

    let query = qs.stringify(params)
    if (cursor !== '' && query === currentQuery) {
      query = `cursor=${cursor}`
    } else {
      newRequest = true
      currentQuery = query
    }

    const res = await request(`${endpoint}?${query}`, {
      method: 'GET',
      headers: new Headers({ 'Content-Type': 'application/json' })
    })

    isNextPageLoading = false
    cursor = res.response.pagination.cursor || ''
    if (!res.response.resources || res.response.resources.length < 50) hasNextPage = false
    setDocuments(newRequest ? res.response.resources : documents.concat(res.response.resources))

    // if (newRequest && res.response.resources.length > 0) {
    //   const resource = res.response.resources[0]
    //   setSelectedUrl(resource.resourceType === 'figma' ? `${resource.path}?mode=embed` : resource.path)
    // }
  }

  useEffect(() => {
    return () => {
      hasNextPage = true
    }
  }, [])

  useEffect(() => {
    cursor = ''
    hasNextPage = true

    if (projectId) {
      requestDocuments()
    }
  }, [projectId])

  const renderDocuments = () => {
    if (documents.length === 0 && !hasNextPage) {
      return <div style={{ marginLeft: 24 }}>No Documents for this project.</div>
    }

    const isItemLoaded = index => !hasNextPage || index < documents.length
    const loadMoreItems = () => { return requestDocuments() }

    return (
      <div className={styles.documentsList}>
        <AutoSizer>
          {({ width, height }) => (
            <InfiniteLoader
              isItemLoaded={isItemLoaded}
              itemCount={documents.length === 0 ? 50 : documents.length + 1}
              minimumBatchSize={1}
              threshold={1}
              loadMoreItems={loadMoreItems}>
              {({ onItemsRendered, ref }) => (
                <FixedSizeList
                  width={width}
                  height={height}
                  itemCount={documents.length === 0 ? 50 : documents.length}
                  itemSize={40}
                  onItemsRendered={onItemsRendered}
                  itemData={{
                    documents,
                    selectedUrl,
                    setSelectedUrl
                  }}
                  ref={grid => {
                    // ref(grid)
                  }}>
                  {MemoizedDocument}
                </FixedSizeList>
              )}
            </InfiniteLoader>
          )}
        </AutoSizer>
      </div>
    )
  }

  const BlankWhiteboardIcon = () => (
    <svg version='1.1' viewBox='0 0 32 32' width='32' height='32'>
      <g>
        <rect fill='#000' x='0' y='0' width='32' height='32' rx='5' />
        <g transform='translate(6.000000, 6.000000)' stroke-linecap='round' stroke-linejoin='round'>
          <g>
            <g>
              <path d='M10,4.16666667 L10,15.8333333 M4.16666667,10 L15.8333333,10' stroke='#FFF' stroke-width='1.5' />
            </g>
          </g>
        </g>
      </g>
    </svg>
  )

  const ProjectKickoffIcon = () => (
    <svg version='1.1' viewBox='0 0 32 32' width='32' height='32'>
      <g><rect width='32' height='32' rx='5' fill='#12BDB6' /><g><g transform='translate(6 6)' fill='#fff' fillRule='nonzero' stroke='#fff' strokeWidth='.25'><path d='m7.119 14.527c-0.18879-0.20505-0.50672-0.22582-0.72091-0.047094s-0.24852 0.49341-0.07783 0.71356c0.3501 0.41654 1.0734 1.4808 0.24738 2.4993-0.39366 0.46038-0.9524 0.75024-1.5576 0.80809-1.2683 0.13746-2.9036 0.46653-3.8637 1.2496-0.34591-1.5974 0.15933-2.9158 1.5388-4.0113 0.14427-0.11567 0.21596-0.29867 0.18836-0.48079s-0.15037-0.33603-0.32253-0.40436c-0.4276-0.15377-0.88096-0.22448-1.3354-0.20827 0.32285-0.61023 0.87421-1.3517 1.6331-1.5599 0.56813-0.14996 1.218 0.037489 1.9308 0.554 0.23127 0.13736 0.52977 0.07729 0.68899-0.13866 0.15922-0.21595 0.12684-0.5168-0.074737-0.69443-0.97903-0.71229-1.9245-0.95388-2.8071-0.72062-1.3543 0.35406-2.1572 1.7307-2.5157 2.5201-0.12276 0.27004-0.083854 0.58554 0.1009 0.81816 0.18476 0.23261 0.48458 0.34358 0.7775 0.28776 0.092092-0.017256 0.18524-0.028388 0.27883-0.033323-0.93081 1.0518-1.6143 2.6034-0.98113 4.7465 0.096711 0.34023 0.40934 0.57507 0.7652 0.57483h0.025157c0.2228-0.006524 0.43266-0.10548 0.57861-0.27284 0.50734-0.57275 1.7862-1.008 3.5094-1.1955 0.88002-0.084895 1.6907-0.51154 2.2558-1.1871 0.56378-0.65691 0.75826-1.551 0.51782-2.3805-0.15525-0.52821-0.421-1.0179-0.77987-1.4371z' /><path d='m13.5 4c-1.1925 7.992e-5 -2.2189 0.8424-2.4516 2.0119-0.23275 1.1695 0.39295 2.3406 1.4945 2.7973s2.3723 0.071614 3.0352-0.91962c0.66291-0.99123 0.53342-2.3127-0.3093-3.1564-0.46798-0.4709-1.1049-0.73493-1.7688-0.73321zm1.003 3.5029c-0.47857 0.4785-1.2285 0.55231-1.7912 0.17628-0.56267-0.37603-0.78136-1.0972-0.52232-1.7224 0.25904-0.62522 0.92365-0.98039 1.5874-0.84829 0.66374 0.13209 1.1417 0.71465 1.1417 1.3914 2.988e-4 0.37691-0.14919 0.7385-0.41556 1.0052v-0.0021757z' /><path d='m19.453 0.024893c-3.0017-0.16638-5.9888 0.50402-8.5881 1.9274-1.0355 0.56099-1.9873 1.2491-2.8303 2.0462l-0.77671-0.041673c-0.90718-0.043147-1.7914 0.27703-2.4341 0.88139l-1.6132 1.519c-0.1699 0.15938-0.24392 0.3882-0.19723 0.6097 0.046692 0.2215 0.20791 0.40636 0.42958 0.49256l2.0934 0.81888c-0.21829 0.56243-0.39863 1.1373-0.53994 1.7211l-0.097366 0.41673c-0.039996 0.17245 0.01586 0.35221 0.14826 0.47716l3.3658 3.1838c0.1327 0.12467 0.32361 0.17727 0.50675 0.13961l0.44257-0.091681c0.62203-0.12941 1.2347-0.29574 1.8345-0.498l0.86523 1.9628c0.093879 0.20712 0.29125 0.35652 0.52625 0.39835 0.23499 0.041829 0.47667-0.029427 0.64436-0.18999l1.6132-1.519c0.64184-0.60521 0.98186-1.4378 0.93604-2.292l-0.039832-0.73137c0.85041-0.78979 1.5856-1.6825 2.1863-2.6546 1.5107-2.4478 2.2219-5.2605 2.0447-8.0867-0.015378-0.2642-0.23944-0.47518-0.52002-0.48966zm-2.4541 8.0159c-0.58082 0.96832-1.3117 1.8497-2.1686 2.615l-0.022129 0.018753c-0.094855 0.084688-0.15449 0.19848-0.16818 0.32088-0.0028501 0.030502-0.0028501 0.06118 0 0.091681l0.053109 0.96474c0.030138 0.56144-0.19333 1.1087-0.61518 1.5065l-1.2082 1.1377-0.84753-1.9253c-0.11443-0.26167-0.43109-0.38799-0.71033-0.28338-0.70564 0.26218-1.4323 0.4712-2.173 0.6251l-0.15047 0.031255-2.9475-2.7754 0.033193-0.14169c0.16354-0.69682 0.38552-1.3803 0.66386-2.0441 0.10982-0.26292-0.023965-0.56025-0.30095-0.66886l-2.0447-0.79804 1.2082-1.1377c0.42299-0.39777 1.0051-0.60824 1.6021-0.57926l1.0334 0.050008c0.16928 0.0068608 0.33249-0.059994 0.44257-0.18128 0.80092-0.79812 1.7243-1.4787 2.7395-2.0191 2.2658-1.2429 4.8536-1.869 7.4751-1.8086 0.064777 2.4534-0.59068 4.876-1.8942 7.0011z' /></g></g></g>
    </svg>
  )

  const RoadmapPlanningIcon = () => (
    <svg version='1.1' viewBox='0 0 32 32' width='32' height='32'>
      <defs>
        <filter colorInterpolationFilters='auto' id='filter-12'>
          <feColorMatrix in='SourceGraphic' type='matrix' values='0 0 0 0 1.000000 0 0 0 0 1.000000 0 0 0 0 1.000000 0 0 0 1.000000 0' />
        </filter>
      </defs>
      <g>
        <rect fill='#FF7043' x='0' y='0' width='32' height='32' rx='5' />
        <g filter='url(#filter-12)'>
          <g transform='translate(7.000000, 7.250000)'>
            <path d='M12,0 C14.0042592,0 15.6412737,1.57236105 15.744802,3.55084143 L15.75,3.75 L15.75,10.25 L14.25,10.25 L14.25,3.75 C14.25,2.50735931 13.2426407,1.5 12,1.5 C10.809136,1.5 9.83435508,2.42516159 9.75519081,3.59595119 L9.75,3.75 L9.75,14.5 C9.75,16.709139 7.959139,18.5 5.75,18.5 C3.60780461,18.5 1.85892112,16.8160315 1.75489531,14.6996403 L1.75,14.5 L1.75,8.25 L3.25,8.25 L3.25,14.5 C3.25,15.8807119 4.36928813,17 5.75,17 C7.0754834,17 8.16003867,15.9684641 8.24468232,14.6643757 L8.25,14.5 L8.25,3.75 C8.25,1.67893219 9.92893219,0 12,0 Z' id='Path-20' fill='#979797' fill-rule='nonzero' />
            <circle id='Oval' stroke='#979797' stroke-width='1.5' cx='2.5' cy='3.25' r='2.5' />
            <path d='M11.9696699,11.7196699 C12.2359365,11.4534034 12.6526002,11.4291973 12.9462117,11.6470518 L13.0303301,11.7196699 L17.5303301,16.2196699 C17.8232233,16.5125631 17.8232233,16.9874369 17.5303301,17.2803301 C17.2640635,17.5465966 16.8473998,17.5708027 16.5537883,17.3529482 L16.4696699,17.2803301 L11.9696699,12.7803301 C11.6767767,12.4874369 11.6767767,12.0125631 11.9696699,11.7196699 Z' id='Path-21' fill='#979797' fill-rule='nonzero' />
            <path d='M11.9696699,11.7196699 C12.2359365,11.4534034 12.6526002,11.4291973 12.9462117,11.6470518 L13.0303301,11.7196699 L17.5303301,16.2196699 C17.8232233,16.5125631 17.8232233,16.9874369 17.5303301,17.2803301 C17.2640635,17.5465966 16.8473998,17.5708027 16.5537883,17.3529482 L16.4696699,17.2803301 L11.9696699,12.7803301 C11.6767767,12.4874369 11.6767767,12.0125631 11.9696699,11.7196699 Z' id='Path-21-Copy' fill='#979797' fill-rule='nonzero' transform='translate(14.750000, 14.500000) scale(-1, 1) translate(-14.750000, -14.500000) ' />
          </g>
        </g>
      </g>
    </svg>
  )

  const BrianstormIcon = () => (
    <svg version='1.1' viewBox='0 0 32 32' width='32' height='32'>
      <defs>
        <rect id='path-6' x='0' y='0' width='32' height='32' rx='5' />
        <filter colorInterpolationFilters='auto' id='filter-8'>
          <feColorMatrix in='SourceGraphic' type='matrix' values='0 0 0 0 1.000000 0 0 0 0 1.000000 0 0 0 0 1.000000 0 0 0 1.000000 0' />
        </filter>
      </defs>
      <g>
        <mask id='mask-7' fill='white'>
          <use href='#path-6' />
        </mask>
        <use id='Rectangle-Copy' fill='#EC3EFD' href='#path-6' />
        <g filter='url(#filter-8)'>
          <g mask='url(#mask-7)'>
            <g transform='translate(5.000000, 5.499962)' fill='#000000'>
              <path d='M15.1114131,20.6201321 C15.4698813,20.6368745 15.7791575,20.4974857 16.0976297,20.3511539 C16.3874578,20.2180051 16.610714,20.0160846 16.7885181,19.7774275 C17.0001142,19.4934206 17.1364263,19.1670522 17.1544663,18.7943234 C17.1722423,18.4257692 17.1600983,18.0687721 17.0093542,17.7270674 C16.9499102,17.5922927 16.9286142,17.4405558 17.0003782,17.3236661 C17.1629143,17.0589943 17.3873584,16.8410785 17.6415026,16.6628876 C17.7181066,16.6091447 17.7750427,16.5162041 17.8964387,16.5169512 C18.0868709,16.5181816 18.263971,16.4621976 18.4429191,16.3838463 C18.9107273,16.1789817 19.1423875,15.7976839 19.2357115,15.3328055 C19.3237556,14.8940736 19.1576995,14.5207735 18.8528673,14.1908896 C18.4490791,13.7539593 18.6118352,13.1807602 19.1569075,12.9815204 C19.3214236,12.9214057 19.4981717,12.8603242 19.6442078,12.7560462 C19.939756,12.5451174 20.2006761,12.3155126 20.3571402,11.959702 C20.4612443,11.7228905 20.5664923,11.4892429 20.6152444,11.2396438 C20.7145084,10.7317887 20.5022083,10.2801813 20.2656202,9.86241035 C20.022564,9.43317019 19.5856878,9.20510339 19.1376355,9.03073556 C18.8853833,8.93256577 18.6098112,8.66204955 18.6252992,8.35044615 C18.6404352,8.04640104 18.8339033,7.86078367 18.9943274,7.65987396 C19.2991156,7.27822461 19.3456236,6.53997372 19.0461154,6.14962356 C18.7681233,5.78726541 18.4211831,5.53955587 17.9434748,5.51991312 C17.8802907,5.51732046 17.8083507,5.50158868 17.7573987,5.46709303 C17.5241105,5.30911613 17.3218864,5.11189767 17.1364263,4.90329785 C16.9531662,4.69720281 16.8855821,4.52147273 17.0527382,4.2290287 C17.0742102,4.191457 17.0915463,4.14887575 17.0992023,4.10655815 C17.2318623,3.37283344 17.1944183,2.6768562 16.655286,2.08924364 C16.3065418,1.70908837 15.8664975,1.49583054 15.3676252,1.41602913 C15.0893251,1.37147042 14.8141489,1.3973092 14.5318887,1.50527839 C14.3302366,1.58239925 14.1228645,1.65666377 13.9480084,1.77016985 C13.6524602,1.96198325 13.4589921,2.2552622 13.267196,2.55363861 C13.0372518,2.91133874 12.5867356,3.15096268 12.1781513,2.68617222 C11.8890271,2.35721114 11.5398869,2.12338774 11.0872587,2.09732924 C10.8536625,2.08388253 10.6155784,2.12822153 10.4058742,2.21399925 C10.1747421,2.30860962 9.98796199,2.49840162 9.82445789,2.68806179 C9.44055766,3.13342922 8.94722937,2.92478546 8.71121323,2.51488044 C8.31037299,1.81859559 7.70955263,1.44591072 6.91464815,1.40095651 C6.39522784,1.37160225 5.92803556,1.5695238 5.54373933,1.89431025 C5.1720271,2.20841843 4.90873095,2.60971052 4.86354292,3.12780445 C4.84435891,3.34752198 4.82416289,3.55818715 4.86442292,3.77838805 C4.89962294,3.97099244 4.91295495,4.15907064 5.004783,4.34473195 C5.10879907,4.55495768 5.00856701,4.76272258 4.85095891,4.91946906 C4.54749073,5.22127306 4.27530657,5.56306565 3.77427826,5.56921774 C3.63985818,5.57084365 3.46500208,5.65231491 3.336126,5.772808 C3.14248189,5.9538113 2.97418178,6.13094757 2.86286172,6.38929144 C2.70820162,6.74844171 2.72672564,7.06997634 2.86136572,7.4177013 C2.95490977,7.65930269 3.15308589,7.82312408 3.27531797,8.04490696 C3.45558607,8.37202241 3.34417801,8.69157958 3.11775387,8.89081944 C2.94835377,9.03987581 2.72927764,9.08852127 2.53101352,9.17645223 C2.39747344,9.23568807 2.26375736,9.30384445 2.1617213,9.39388469 C1.85037711,9.66879526 1.65308099,10.012829 1.49089689,10.4066067 C1.21783273,11.0696703 1.44056086,11.6329821 1.74587705,12.1746297 C1.98347719,12.5960919 2.41595345,12.8220933 2.86321372,12.9961975 C3.43173806,13.2175409 3.53821812,13.7646376 3.14670589,14.1899228 C2.62627358,14.7551682 2.65086959,15.2915426 2.94236977,15.8377604 C3.14956589,16.2259573 3.52224611,16.4498934 3.97421438,16.509349 C4.06076244,16.5207303 4.1664065,16.5123811 4.22888654,16.5590491 C4.4979467,16.7600906 4.75534685,16.9745349 4.95167497,17.2555097 C5.06268704,17.4144094 5.04733103,17.56641 4.98779899,17.728166 C4.96782298,17.7824802 4.92017095,17.8290603 4.90934695,17.8839018 C4.76027486,18.6387633 4.80044688,19.3571078 5.35603521,19.9584308 C5.6703274,20.2985974 6.08322365,20.4893562 6.51895591,20.5979406 C6.92424015,20.6989667 7.3333084,20.6003575 7.71254463,20.4393485 C7.8265487,20.3909667 7.95903278,20.3464959 8.05209283,20.2681006 C8.31701699,20.0449555 8.54330913,19.7895119 8.72771324,19.4865654 C8.87652133,19.2421077 9.10694946,19.0633894 9.44390167,19.1033341 C9.61589777,19.1237239 9.70882583,19.2358238 9.81138989,19.3384318 C10.1154741,19.6426088 10.4307783,19.9141357 10.8977945,19.9140918 C11.1325347,19.9140918 11.3844348,19.9247261 11.583843,19.8240955 C11.7997951,19.7151156 11.9995552,19.5489652 12.1661393,19.3586898 C12.5701475,18.8971951 13.0095758,19.0982366 13.265964,19.4685486 C13.5146961,19.8277867 13.7474122,20.1675579 14.1666885,20.3602502 C14.4730167,20.5010891 14.7704569,20.6274706 15.1114131,20.6201321 M0,11.7008308 L0,10.3385822 C0.0990880595,10.3070307 0.126148076,10.2292947 0.139436084,10.1359587 C0.205392123,9.67261835 0.462132277,9.29861517 0.714560429,8.92303003 C0.941688565,8.58501658 1.27344876,8.3578726 1.58650895,8.11231629 C1.65118899,8.06160549 1.67618101,8.0371729 1.62342497,7.95930501 C1.5011049,7.77878509 1.45318887,7.55687038 1.40329284,7.35758658 C1.27868477,6.8598385 1.37038082,6.35040144 1.56772094,5.88868702 C1.73773704,5.49091041 1.97687719,5.1154571 2.3294494,4.83509753 C2.61782557,4.60580032 2.91724575,4.38225971 3.28077397,4.30676476 C3.47221808,4.26699589 3.53021012,4.19914712 3.50961811,4.02346098 C3.4985741,3.92920216 3.51555811,3.8278245 3.48739809,3.74002537 C3.35953402,3.34150172 3.48458209,2.95058029 3.57249414,2.58088358 C3.6714062,2.16469464 3.86465432,1.76814844 4.12680648,1.40833902 C4.36299862,1.08412384 4.64459879,0.828899955 4.98067099,0.618410563 C5.18566711,0.49000764 5.41094725,0.40752568 5.62069537,0.296963819 C5.86964752,0.165748512 6.13690368,0.0969769254 6.39562384,0.0557579172 C7.01039221,-0.0422361004 7.60874857,0.046793442 8.18796491,0.313310804 C8.55923714,0.484163153 8.91048935,0.673867267 9.21457353,0.941878708 C9.36241362,1.0721712 9.48644969,1.18036011 9.69184182,1.05103438 C9.94281797,0.89301353 10.2199741,0.824066169 10.5179863,0.781528856 C10.8842425,0.729192141 11.2394107,0.794755851 11.599155,0.791591919 C11.8289231,0.789614461 12.0351952,0.891563394 12.2090393,0.984855456 C12.4393355,1.10838065 12.5753835,1.15219233 12.7754517,0.948382347 C13.0177598,0.701507732 13.320788,0.516813178 13.6378082,0.382785486 C13.8367323,0.298633673 14.0184084,0.135691154 14.2622566,0.171021732 C14.2949486,0.175767631 14.3334486,0.157135585 14.3661406,0.142370567 C14.8236529,-0.0640320792 15.3043972,-0.0123545165 15.7623495,0.0868259756 C16.1018977,0.160343461 16.4353739,0.293404396 16.7547261,0.465706881 C17.0526942,0.626496168 17.3316544,0.804994688 17.5617305,1.03916963 C17.8391947,1.32159454 18.0362708,1.66413417 18.2203229,2.02324049 C18.4620151,2.49479825 18.4848511,2.99614971 18.5643151,3.49341442 C18.5729831,3.5476407 18.5548991,3.61065569 18.5346591,3.66413494 C18.4755231,3.82044199 18.4981831,3.98211014 18.4927711,4.1420645 C18.4897351,4.23122588 18.5324151,4.27705895 18.6206792,4.28575977 C18.9739114,4.32069485 19.2480315,4.52687778 19.5193797,4.72326131 C19.8435719,4.95783174 20.1195841,5.24922113 20.2900402,5.6148311 C20.4522683,5.96277577 20.5962804,6.31669677 20.6364964,6.71100184 C20.6779444,7.11769899 20.5923644,7.50550042 20.4291243,7.85137976 C20.3134482,8.0963648 20.4432923,8.15410657 20.5697043,8.2408071 C21.1043487,8.60751566 21.4713969,9.09730997 21.719953,9.69274447 C21.7819931,9.8414493 21.8440771,9.98369442 21.8685851,10.1421986 C21.8800251,10.2160677 21.9130691,10.2666467 22.0000132,10.2506952 L22.0000132,11.7887179 C21.8761531,11.7630549 21.8728091,11.8599942 21.8572331,11.9352255 C21.7662851,12.3746606 21.5266169,12.7389083 21.2821968,13.1037273 C21.0580166,13.4382692 20.7407764,13.6720047 20.4308403,13.9119362 C20.3297282,13.9901996 20.3809442,14.0126547 20.4025922,14.1038815 C20.4578563,14.3369578 20.6215364,14.5361537 20.6214484,14.7785022 C20.6212724,15.1452547 20.6427444,15.5011531 20.5065643,15.8733546 C20.3946282,16.1794211 20.2679082,16.4760837 20.0938881,16.7358338 C19.8663639,17.0753413 19.5451637,17.3500322 19.1717795,17.5296732 C19.0387674,17.593655 18.9272274,17.7272872 18.7635913,17.7155982 C18.5123071,17.6976253 18.4651831,17.8346851 18.4920231,18.0426697 C18.5022751,18.1222514 18.4855111,18.208864 18.5102831,18.2824694 C18.6442632,18.6804218 18.4799671,19.061368 18.4336351,19.4448191 C18.415551,19.5941391 18.351795,19.7664416 18.273871,19.9132568 C18.1449949,20.1560887 18.0270748,20.4036664 17.8616347,20.6283495 C17.6851066,20.8681492 17.4881625,21.0778037 17.2448863,21.2497546 C16.9637702,21.4484672 16.679046,21.6288992 16.3489578,21.7470633 C16.0828016,21.8423767 15.8229815,21.9552676 15.5409853,21.9812382 C14.941661,22.0364752 14.3628406,21.9757892 13.8014003,21.721576 C13.4109,21.5447474 13.0366358,21.3407177 12.7385356,21.046428 C12.5510075,20.8612501 12.4422395,20.9209693 12.2608714,21.0043301 C12.0414432,21.1051805 11.8264151,21.2274313 11.5718309,21.2437783 C11.2182907,21.2664971 10.8693705,21.2904463 10.5115623,21.2569174 C10.2464621,21.2320893 9.999314,21.1521122 9.79022587,21.0344754 C9.54892973,20.89869 9.39959364,20.8735103 9.20401352,21.0860651 C8.97494938,21.3349611 8.67574921,21.5017267 8.37443702,21.6488056 C8.02520882,21.8192185 7.65565259,21.9558828 7.26554836,21.9803593 C6.84578811,22.0066815 6.42919586,22.0182826 6.01035961,21.8780589 C5.58325135,21.7351106 5.18210311,21.5606549 4.81699089,21.3005533 C4.35142661,20.9688677 4.04355843,20.5255217 3.78646627,20.0139754 C3.55234213,19.5481742 3.52013411,19.0578526 3.43547806,18.5695084 C3.42478605,18.5078996 3.43785406,18.4351731 3.46139408,18.376113 C3.52361011,18.2199378 3.5005541,18.0584454 3.5080341,17.8987108 C3.51300611,17.7925872 3.46535408,17.7317254 3.35597001,17.7271993 C3.02007381,17.7131813 2.76909766,17.5019449 2.51446951,17.3296424 C2.17940931,17.1029378 1.90999715,16.8001671 1.71371303,16.4361391 C1.56292494,16.1563508 1.45811687,15.8538437 1.39480084,15.5539732 C1.29474478,15.0801304 1.3408568,14.5829096 1.57383694,14.1562621 C1.69391302,13.9363249 1.56244094,13.884867 1.46572888,13.8174137 C0.770000462,13.3323214 0.323928194,12.6831 0.134508081,11.8582365 C0.11598407,11.7776441 0.075020045,11.7275924 0,11.7008308' id='Fill-1' />
              <path d='M10.2880091,13.4017399 L10.2892492,13.4017399 C10.2892492,13.9393004 10.2884225,14.4768162 10.2903056,15.0143767 C10.2905812,15.0863382 10.2804764,15.1724142 10.3806058,15.1973274 C10.4651646,15.2182975 10.4908399,15.1515337 10.5375976,15.0998254 C10.7743255,14.8381472 10.9952531,14.5593075 11.2408456,14.3101755 C11.7090193,13.8351668 12.1237294,13.3164704 12.5674679,12.8229113 C13.0307729,12.3076202 13.4774509,11.7763328 13.9422257,11.2608626 C13.989856,11.208034 14.0675711,11.1515313 14.0302293,11.068547 C13.9912339,10.9819333 13.8968,11.0137469 13.8252856,11.0132092 C13.3508653,11.0094006 12.8763072,11.0135229 12.4019329,11.0070257 C12.1587747,11.0036651 11.8469957,10.7833894 11.7944967,10.5907602 C11.7316632,10.3603579 11.6914737,10.1294627 11.6942296,9.88691751 C11.7037832,9.05084664 11.6980878,8.21459655 11.6977662,7.37843607 C11.6977203,7.2291361 11.6972151,7.07979132 11.6938621,6.93053616 C11.6924842,6.8690597 11.6798073,6.80821055 11.60223,6.7954403 C11.5427494,6.78567217 11.5082094,6.81802349 11.4703164,6.86247294 C11.2258262,7.14901955 10.9859291,7.44004695 10.7271085,7.71395772 C10.2272884,8.24291515 9.7617328,8.80126656 9.27679434,9.34241174 C8.8595121,9.80810039 8.45573354,10.2872314 8.03211284,10.748977 C7.98030278,10.8054349 7.92587466,10.8705408 7.95559196,10.9473416 C7.99031572,11.037047 8.08548455,11.0089525 8.15741234,11.0094454 C8.62420809,11.0126715 9.09109571,11.0163458 9.55784553,11.0111033 C9.77091898,11.0086836 9.92506309,11.1041693 10.062075,11.2477339 C10.2514481,11.4460537 10.2831863,11.6938863 10.2862637,11.9459308 C10.2921888,12.4311109 10.2880091,12.9164702 10.2880091,13.4017399 M8.83434197,14.9059864 C8.83406638,14.1741835 8.83526058,13.4423807 8.83346928,12.7105778 C8.83278032,12.4228214 8.81032011,12.4022994 8.52297638,12.4016273 C8.07138376,12.4005071 7.61919403,12.3877368 7.16829037,12.404943 C6.71655995,12.4221045 6.37860038,12.2470399 6.11716169,11.9006748 C5.94556384,11.6733642 5.97293866,11.0590925 6.13121654,10.8239854 C6.40799616,10.4128728 6.79574483,10.0950951 7.09245845,9.70607277 C7.52048853,9.14489845 8.03316925,8.65698508 8.47879086,8.11086623 C8.7795464,7.74227633 9.08576772,7.37037064 9.41624056,7.02844145 C9.8858381,6.54254443 10.3043605,6.01493125 10.7708806,5.52643537 C11.1305196,5.14991447 11.460625,4.7396084 11.8051986,4.34570203 C11.9434966,4.1875749 12.1037495,4.03621377 12.3377215,4.00614766 C12.7908298,3.94798699 13.1448652,4.31012455 13.1492746,4.87542119 C13.1567154,5.8312188 13.1515711,6.78706122 13.1517089,7.74290364 C13.1518008,8.27311568 13.1573125,8.80337253 13.1492746,9.33345016 C13.1461972,9.53575789 13.2206512,9.60978056 13.4321171,9.60400034 C13.8910587,9.59145412 14.350781,9.60870517 14.8097685,9.59777204 C15.2447801,9.5873766 15.5843932,9.73035866 15.8385748,10.087881 C16.0606967,10.4003266 16.0534396,10.8629683 15.8177222,11.1958911 C15.3009995,11.9257224 14.6447388,12.5403077 14.078916,13.2274819 C13.5936561,13.8167956 13.0783573,14.3810168 12.576011,14.9540653 C12.1250614,15.4684601 11.6836654,15.9939225 11.2117254,16.4933515 C10.8561743,16.869514 10.528044,17.2751152 10.1801633,17.6610458 C10.0429218,17.813303 9.88799685,17.9584807 9.66665584,17.9913697 C9.19549665,18.0614045 8.84513573,17.7004767 8.83728154,17.1462028 C8.82671744,16.3995686 8.83466348,15.6527551 8.83434197,14.9059864' id='Fill-4' />
            </g>
          </g>
        </g>
      </g>
    </svg>
  )

  const InvertedAllDocsIcon = () => (
    <svg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32'>
      <g fill='none' fill-rule='evenodd'>
        <rect width='32' height='32' rxd='3' />
        <g stroke='#1D1D1F' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' transform='translate(8.667 6.833)'>
          <polyline points='14.7 12.8 7.3 18.3 0 12.8' />
          <polyline points='14.7 9.2 7.3 14.6 0 9.2' />
          <polygon points='7.4 0 0 5.7 7.4 11.3 14.7 5.7' />
        </g>
      </g>
    </svg>
  )

  const InvertedFigmaIcon = () => (
    <svg xmlns='http://www.w3.org/2000/svg' width='32' height='32' viewBox='0 0 32 32' aria-hidden='true'>
      <g stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'>
        <rect x='0' y='0' width='32' height='32' rx='3' />
        <g transform='translate(9.500000, 6.000000)' fill-rule='nonzero'>
          <path d='M3.40659341,19.8920875 C5.22637363,19.8920875 6.7032967,18.4151644 6.7032967,16.5953842 L6.7032967,13.2986809 L3.40659341,13.2986809 C1.58681319,13.2986809 0.10989011,14.775604 0.10989011,16.5953842 C0.10989011,18.4151644 1.58681319,19.8920875 3.40659341,19.8920875 Z' fill='#0ACF83' />
          <path d='M0.10989011,10.0019776 C0.10989011,8.18219741 1.58681319,6.70527433 3.40659341,6.70527433 L6.7032967,6.70527433 L6.7032967,13.2986809 L3.40659341,13.2986809 C1.58681319,13.2986809 0.10989011,11.8217578 0.10989011,10.0019776 Z' fill='#A259FF' />
          <path d='M0.10989011,3.40857103 C0.10989011,1.58879081 1.58681319,0.111867736 3.40659341,0.111867736 L6.7032967,0.111867736 L6.7032967,6.70527433 L3.40659341,6.70527433 C1.58681319,6.70527433 0.10989011,5.22835125 0.10989011,3.40857103 Z' fill='#F24E1E' />
          <path d='M6.7032967,0.111867736 L10,0.111867736 C11.8197802,0.111867736 13.2967033,1.58879081 13.2967033,3.40857103 C13.2967033,5.22835125 11.8197802,6.70527433 10,6.70527433 L6.7032967,6.70527433 L6.7032967,0.111867736 Z' fill='#FF7262' />
          <path d='M13.2967033,10.0019776 C13.2967033,11.8217578 11.8197802,13.2986809 10,13.2986809 C8.18021978,13.2986809 6.7032967,11.8217578 6.7032967,10.0019776 C6.7032967,8.18219741 8.18021978,6.70527433 10,6.70527433 C11.8197802,6.70527433 13.2967033,8.18219741 13.2967033,10.0019776 Z' fill='#1ABCFE' />
        </g>
      </g>
    </svg>
  )

  return (
    <div className={styles.root}>
      <div className={styles.header}>
        <Text size='smaller' order='subtitle'>Pages</Text>
        <Dropdown
          aria-label='New Page'
          closeOnClick
          items={[
            {
              label: 'Start From Scratch',
              type: 'label'
            }, {
              element: 'div',
              label: 'Blank Whiteboard',
              icon: <BlankWhiteboardIcon />,
              type: 'item'
            }, {
              label: 'Start From Template',
              type: 'label'
            }, {
              label: 'Brainstorm',
              icon: <BrianstormIcon />,
              type: 'item'
            }, {
              label: 'Project Kick-off',
              icon: <ProjectKickoffIcon />,
              type: 'item'
            },
            {
              label: 'Inspiration Board',
              icon: <DocumentIcon size='32' documentType='board' />,
              type: 'item'
            },
            {
              label: 'Roadmap Planning',
              icon: <RoadmapPlanningIcon />,
              type: 'item'
            },
            {
              label: 'Prototype',
              icon: <DocumentIcon size='32' documentType='prototype' />,
              type: 'item'
            },
            {
              label: 'Spec',
              icon: <DocumentIcon size='32' documentType='spec' />,
              type: 'item'
            },
            {
              label: 'Add existing',
              type: 'label'
            },
            {
              label: 'InVision Document',
              icon: <InvertedAllDocsIcon />,
              type: 'item'
            },
            {
              label: 'Figma file',
              icon: <InvertedFigmaIcon />,
              type: 'item'
            }
          ]}
          placement='bottom'
          align='center'
          trigger={(
            <IconButton withTooltip tooltip='Add New Page'>
              <Add size={16} />
            </IconButton>
          )}
          width={338}
          unstyledTrigger
        />
      </div>
      {renderDocuments()}
    </div>
  )
}

export default Documents
