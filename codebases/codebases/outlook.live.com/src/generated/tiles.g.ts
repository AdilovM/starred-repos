// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by the @augloop/code-gen tool.
// Source: https://dev.azure.com/office/ISS/_git/augloop-server?path=%2Fmodules%2Ftypes-core%2Fsrc%2Ftiles.ts
// Changes to this file may cause incorrect behavior and will be lost upon regeneration.
// </auto-generated>
// ------------------------------------------------------------------------------

import { IBinary, IBlob, IBlobRef, IDocument, IDynamicContext, IGridCell, IGridNeighborhoodContext, ISession, ITileGroup, OpenType } from '../tiles';
import { SchemaObjectHeader } from '../schema-object';
import { SchemaObject } from './schema-object.g';

export class Blob implements IBlob {
    public readonly id: string;
    public readonly sizeBytes: number;
    public readonly data?: Uint8Array;
    public readonly dataPointer?: IBlobRef;
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IBlob) {
        SchemaObject.assign(Blob, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_Blob';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: Blob.getTypeName(), B_: Blob.getBaseTypes() };
}

export class Binary implements IBinary {
    public data?: Uint8Array;
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IBinary) {
        SchemaObject.assign(Binary, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_Binary';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: Binary.getTypeName(), B_: Binary.getBaseTypes() };
}

export class TileGroup implements ITileGroup {
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: ITileGroup) {
        SchemaObject.assign(TileGroup, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_TileGroup';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: TileGroup.getTypeName(), B_: TileGroup.getBaseTypes() };
}

export class Session implements ISession {
    public readonly activeUserId: string;
    public readonly widthDpi?: number;
    public readonly heightDpi?: number;
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: ISession) {
        SchemaObject.assign(Session, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_Session';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_TileGroup'];
    }
    public static readonly H_ = { T_: Session.getTypeName(), B_: Session.getBaseTypes() };
}

export class Document implements IDocument {
    public readonly isReadonly: boolean;
    public readonly title?: string;
    public readonly url?: string;
    public readonly openType?: OpenType;
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IDocument) {
        SchemaObject.assign(Document, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_Document';
    }
    public static getBaseTypes(): string[] {
        return ['AugLoop_Core_TileGroup'];
    }
    public static readonly H_ = { T_: Document.getTypeName(), B_: Document.getBaseTypes() };
}

export class GridCell implements IGridCell {
    public readonly column: number;
    public readonly row: number;
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IGridCell) {
        SchemaObject.assign(GridCell, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_GridCell';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: GridCell.getTypeName(), B_: GridCell.getBaseTypes() };
}

export class GridNeighborhoodContext implements IGridNeighborhoodContext {
    public readonly width: number;
    public readonly height: number;
    public readonly retrievedWidth: number;
    public readonly retrievedHeight: number;
    public readonly neighborhoodTopRow: number;
    public readonly neighborhoodLeftColumn: number;
    public readonly targetGridTopRow: number;
    public readonly targetGridLeftColumn: number;
    public readonly targetGridRelativeTopRow: number;
    public readonly targetGridRelativeLeftColumn: number;
    public readonly numberOfNonEmptyCells: number;
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IGridNeighborhoodContext) {
        SchemaObject.assign(GridNeighborhoodContext, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_GridNeighborhoodContext';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: GridNeighborhoodContext.getTypeName(), B_: GridNeighborhoodContext.getBaseTypes() };
}

export class DynamicContext implements IDynamicContext {
    public readonly H_: SchemaObjectHeader;
    public constructor(obj?: IDynamicContext) {
        SchemaObject.assign(DynamicContext, this, obj);
    }
    public static getTypeName(): string {
        return 'AugLoop_Core_DynamicContext';
    }
    public static getBaseTypes(): string[] {
        return [];
    }
    public static readonly H_ = { T_: DynamicContext.getTypeName(), B_: DynamicContext.getBaseTypes() };
}

