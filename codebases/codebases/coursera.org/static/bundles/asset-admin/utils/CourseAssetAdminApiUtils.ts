import Q from 'q';
import Api from 'js/lib/api';
import URI from 'jsuri';
import { AssetConfig } from '../types/assets';

const authoringAssetsApi = Api('/api/authoringAssets.v1/', { type: 'rest' });
const assetsApi = Api('/api/assets.v1/', { type: 'rest' });
const courseApi = Api('/api/onDemandCourses.v1/', { type: 'rest' });
const fields = [
  'name',
  'filename',
  'createdAt',
  'typeName',
  'pageCount',
  'audioDuration',
  'videoDuration',
  'isDescriptionAutoGenerated',
  'autoGenDescriptionConfidenceLevel',
  'tags',
];
type AssetIds = Array<string>;
export type UpdateAssetDataPayload = {
  courseId: string;
  assetId: string;
  description: string;
  longDescription: string;
  name: string;
};

const AssetAdminApiUtils = {
  getCourse(courseId: string) {
    const uri = new URI(courseId);

    return Q(courseApi.get(uri.toString()));
  },

  getAssetsListByContext(config: AssetConfig) {
    const uri = new URI()
      .addQueryParam('q', 'listByCourse')
      .addQueryParam('courseId', config.courseId)
      .addQueryParam('limit', config.pageSize ?? 20)
      .addQueryParam('start', config.startIndex ?? 0)
      .addQueryParam('fields', fields.join(','));

    if (config.assetType) {
      uri.addQueryParam('typeName', config.assetType);
    }

    if (config.keyword) {
      uri.addQueryParam('name', config.keyword);
    }

    return Q(authoringAssetsApi.get(uri.toString())).then((response) => {
      if (response.errorCode) {
        return null;
      }
      return response;
    });
  },

  getAssetsById(ids: AssetIds) {
    const uri = new URI().addQueryParam('ids', ids.join()).addQueryParam('fields', 'name,filename,typeName,tags');

    // use the `assets.v1` Api to accommodate both learner-side and partner-side calls
    return Q(assetsApi.get(uri.toString()));
  },

  updateNameAndDescription({ courseId, assetId, name, description, longDescription }: UpdateAssetDataPayload) {
    const uri = new URI()
      .addQueryParam('action', 'updateNameAndDescription')
      .addQueryParam('courseId', courseId)
      .addQueryParam('assetId', assetId);

    return Q(authoringAssetsApi.post(uri.toString(), { data: { name, description, longDescription } }));
  },

  deleteAssets(assetIds: AssetIds) {
    const uri = new URI().addQueryParam('action', 'hide').addQueryParam('assetIds', assetIds.join(','));
    return Q(authoringAssetsApi.post(uri.toString()));
  },
};

export default AssetAdminApiUtils;

export const {
  getCourse,
  getAssetsListByContext,
  getAssetsById,
  updateNameAndDescription,
  deleteAssets,
} = AssetAdminApiUtils;
