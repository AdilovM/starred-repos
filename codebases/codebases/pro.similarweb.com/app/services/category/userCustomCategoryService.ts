import swLog from "@similarweb/sw-log";
import { camelCase, find, mapKeys, max } from "lodash";
import { CacheService } from "services/cache/CacheService";
import { ICategory } from "common/services/categoryService.types";
import { getSharedCustomCategories } from "common/services/sharedAssetsService";
import { DefaultFetchService } from "services/fetchService";

interface ICustomCategoryRecord {
    id: string;
    name: string;
    domains: string[];
    addedTime: Date;
    lastUpdated: Date;
    userId?: number;
    categoryHash: string;
}

export type ICustomCategories = ICustomCategoryRecord[];

interface ICustomCategoryResponse {
    AddedTime: string;
    CategoryHash: string;
    CategoryType: string;
    CreationType: number;
    Domains: string[];
    Id: string;
    LastUpdated: string;
    Name: string;
    UserId: string;
}

export const CUSTOM_CATEGORY_PREFIX = "*";

let customIndustries: ICustomCategories;
let customIndustriesLastUpdated: Date;

const init = async () => {
    customIndustries = window.similarweb?.config?.userData?.customIndustries;
    const updatedOnTimestamps = customIndustries?.map((x) => x.lastUpdated) ?? [];
    const maxUpdatedOnTimestamp = max(updatedOnTimestamps) ?? new Date();
    await setCustomCategoriesLastUpdated(maxUpdatedOnTimestamp);
};

const isCustomCategory = (name: string) => name?.startsWith(CUSTOM_CATEGORY_PREFIX);

const getCustomCategoryFromRecord: (record: ICustomCategoryRecord) => ICategory = (record) => ({
    ...record,
    id: CUSTOM_CATEGORY_PREFIX + record.name,
    text: record.name,
    inactive: false,
    cssClass: "parent-category",
    domains: record.domains,
    categoryId: record.id.toString(),
    icon: "sw-icon-custom-categories",
    isCustomCategory: true,
    categoryHash: record.categoryHash,
    categoryType: (record as any).categoryType,
    forApi: record.id,
    forUrl: CUSTOM_CATEGORY_PREFIX + record.id,
    forDisplayApi: record.name,
});

const getCustomCategories: () => ICategory[] = () =>
    customIndustries.map(getCustomCategoryFromRecord);

const getCustomCategoriesRecords = () => customIndustries;

const getCustomCategoryByName = (name: string): ICategory => find(getCustomCategories(), { name });

const getCustomCategoryById = (id: string): ICategory =>
    getCustomCategories().find(({ categoryId }) => categoryId === id);

const getCategoryHash = (categoryName, attribute) => {
    return getCustomCategories().find(
        (customCategory) => customCategory[attribute] === categoryName,
    )?.categoryHash;
};

const getCategoryHashByName = (categoryName) => {
    return getCategoryHash(categoryName, "text");
};

const getCategoryHashById = (categoryName) => {
    return getCategoryHash(categoryName, "id");
};

const getCustomCategoryByIdAsync = async (categoryId) => {
    const myCustomCategory = find(UserCustomCategoryService.getCustomCategories(), {
        categoryId,
    });

    if (myCustomCategory) {
        return myCustomCategory;
    } else {
        try {
            const data = (await getSharedCustomCategories()) as [];
            return find(data, { id: categoryId });
        } catch (err) {
            return undefined;
        }
    }
};

const setCustomCategories = async (categories: ICustomCategories) => {
    const toCamelCase = categories.map(keysToCamelCase);
    customIndustries = toCamelCase;
    try {
        await updateCustomIndustries(categories);
    } catch (e) {
        swLog.error(
            "user.datastore.ts - setCustomCategories() -- error updating user cache custom industries field",
        );
        throw e;
    }
};

const getCustomCategoriesLastUpdated = (): Date => customIndustriesLastUpdated;

const setCustomCategoriesLastUpdated = async (updatedTimestamp: Date) => {
    await updateCustomIndustriesLastUpdated(updatedTimestamp);
    customIndustriesLastUpdated = updatedTimestamp;
};

const addCustomCategory = async (customCategory) => {
    const url = `api/userdata/customIndustry`;
    const response: ICustomCategoryResponse[] = await DefaultFetchService.getInstance().post(url, {
        ...customCategory,
        AddedTime: new Date(),
    });
    try {
        await customCategoryResponseHandler(response);
        return response;
    } catch (err) {
        throw err;
    }
};

const addCustomCategoryFromArena = async (customCategory, arenaId) => {
    const url = `api/userdata/customIndustry/autogenerated`;
    const response: ICustomCategoryResponse[] = await DefaultFetchService.getInstance().post(url, {
        ...customCategory,
        AddedTime: new Date(),
        generatedFromArenaId: arenaId,
    });
    try {
        await customCategoryResponseHandler(response);
        return response;
    } catch (err) {
        throw err;
    }
};

const deleteCustomCategory = async (param) => {
    const url = `api/userdata/customIndustry?id=${param.id}`;
    const response = await DefaultFetchService.getInstance().delete(url);
    try {
        await customCategoryResponseHandler(response);
        return response;
    } catch (err) {
        throw err;
    }
};

const updateCustomCategory = async (customCategory) => {
    const url = `api/userdata/customIndustry`;
    const response = await DefaultFetchService.getInstance().put(url, customCategory);
    try {
        await customCategoryResponseHandler(response);
        return response;
    } catch (err) {
        throw err;
    }
};

const customCategoryResponseHandler = async (response) => {
    await UserCustomCategoryService.setCustomCategories(response);
    await UserCustomCategoryService.setCustomCategoriesLastUpdated(new Date());
};

//////// Private functions /////////

const updateCustomIndustries = async (data: ICustomCategories) => {
    const newCustomIndustries = data.map((category) => {
        return Object.keys(category).reduce((acc, key) => {
            acc[key.charAt(0).toLowerCase() + key.substring(1)] = category[key];
            return acc;
        }, {});
    });
    try {
        await CacheService.updateUserCache("customIndustries", newCustomIndustries);
    } catch (e) {
        swLog.error(
            "user.datastore.ts - updateCustomIndustries() -- error updating user cache custom industries field",
        );
        throw e;
    }
};

const updateCustomIndustriesLastUpdated = async (updatedOnTimestamp: Date) => {
    await CacheService.updateUserCache("customIndustriesLastUpdated", updatedOnTimestamp);
};

const keysToCamelCase = <T extends object>(obj: T) => {
    return mapKeys(obj, (value, key) => camelCase(key)) as T;
};

const removeCategoryIdPrefix = (categoryId) => categoryId.slice(1);

export const UserCustomCategoryService = {
    init,
    isCustomCategory,
    getCustomCategories,
    getCustomCategoriesRecords,
    getCustomCategoryFromRecord,
    getCustomCategoryByName,
    getCustomCategoryById,
    getCustomCategoryByIdAsync,
    getCategoryHash,
    getCategoryHashByName,
    getCategoryHashById,
    setCustomCategories,
    getCustomCategoriesLastUpdated,
    setCustomCategoriesLastUpdated,
    removeCategoryIdPrefix,
    addCustomCategory,
    deleteCustomCategory,
    updateCustomCategory,
    addCustomCategoryFromArena,
};
